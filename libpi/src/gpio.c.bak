/*
 * Implement the following routines to set GPIO pins to input or output,
 * and to read (input) and write (output) them.
 *
 * DO NOT USE loads and stores directly: only use GET32 and PUT32 
 * to read and write memory.  Use the minimal number of such calls.
 *
 * See rpi.h in this directory for the definitions.
 */
#include "rpi.h"

// see broadcomm documents for magic addresses.
#define GPIO_BASE 0x20200000
static const unsigned gpio_set0  = (GPIO_BASE + 0x1C);
static const unsigned gpio_clr0  = (GPIO_BASE + 0x28);
static const unsigned gpio_lev0  = (GPIO_BASE + 0x34);
static const uintptr_t gpio_fsel0 = (GPIO_BASE + 0x00);

// write 3 bits
uint32_t write_bits(uint32_t word, uint32_t bits, uint32_t loc) {
    uint32_t new = word & ~(0b111 << loc);
    new |= bits << loc;
    return new;
}

void gpio_set_function(unsigned pin, gpio_func_t function) {
    if((pin >= 32 && pin != 47) | (function > 7))
        return;

    volatile unsigned *base_addr = (unsigned *) gpio_fsel0;
    volatile unsigned *addr = &base_addr[pin / 10];
    uint32_t fseln = GET32((uintptr_t) addr);
    uint32_t fseln_new = write_bits(fseln, function, (pin % 10) * 3);
    PUT32((uintptr_t) addr, fseln_new);
}

//
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output
//

// set <pin> to be an output pin.  
//
// note: fsel0, fsel1, fsel2 are contiguous in memory, so you 
// can (and should) use array calculations!
void gpio_set_output(unsigned pin) {
    if(pin >= 32 && pin != 47)
        return;

    gpio_set_function(pin, GPIO_FUNC_OUTPUT);
}

// set GPIO <pin> on.
void gpio_set_on(unsigned pin) {
    if(pin >= 32 && pin != 47)
        return;

    PUT32(gpio_set0, 0b1 << pin);
}

// set GPIO <pin> off
void gpio_set_off(unsigned pin) {
    if(pin >= 32 && pin != 47)
        return;

    PUT32(gpio_clr0, 0b1 << pin);
}

// set <pin> to <v> (v \in {0,1})
void gpio_write(unsigned pin, unsigned v) {
    if(pin >= 32 && pin != 47)
        return;

    if(v)
       gpio_set_on(pin);
    else
       gpio_set_off(pin);
}

//
// Part 2: implement gpio_set_input and gpio_read
//

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    if(pin >= 32 && pin != 47)
        return;

    gpio_set_function(pin, GPIO_FUNC_INPUT);
}

// return the value of <pin>
int gpio_read(unsigned pin) {
    if(pin >= 32 && pin != 47)
        return -1;

    uint32_t v = GET32(gpio_lev0);
    v &= (1 << pin);
    return DEV_VAL32(v != 0);
}
